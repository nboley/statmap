Statmap is a mapping utility.

( write intro )

Contact: Nathan Boley ( nboley@berkeley.edu )


===== Testing Statmap ===============================================================

Test.py:

Statmap has been built with a test suite that checks several aspects of
it's operation. The fiels and data require python and numpy to run,
and can be found in the 'tests' sub directory.

To run the tests, one can run 'make test' from the root directory. However,
for finered grain control over the tests, and to try out statmap, it may be 
worth looking at the tests individually.

There are two global configuration options found at the begining of the file:

P_STATMAP_INPUT - print the ouput generated by statmap to stdout 

( not the mappings, just the messages )

CLEANUP - remove the test file generated by each test.

If one is interested in testign various options, set CLEANUP to false, run
the test of interest, and then you can re-run statmap on the data files. 

Furthermore, there are several functions that can be called to run specific tests.

    test_fivep_sequence_finding()
    test_threep_sequence_finding()
    test_paired_end_sequence_finding( )
    test_repeat_sequence_finding()
    test_mutated_read_finding()
    test_snp_finding()

Simulate_chipseq.py

This simulates and maps a chipseq experiment to measure the ability of the chipseq
kernel to distringuish between repeated regions. It runs the experiment for repeats 
of various qualities, maps back to the region, and then plots the densities which
it saves as 'chipseq_sim_output.wig'

===== Arguments ====================================================================

Required Arguments:

-g : A filename containing the reference genome as a fasta file.

-p : The minimum match penalty.

This sets the lower bound, in log10 probability space, that we will match 
too. That is, statmap guarantees to return all of the locations in the 
reference genome such that the log of the probability of observing the seq
at the reference genome location is greater than the value passed to -p.

-m : The maximum penalty spread.

This sets the upper bound, in log10 probability, of the difference of the 
probabilities of the top matching sequence, to the sequence of interest. 
That is, if we find a sequence with a match penalty of -6, but we have already
observed a sequence with a match penalty of -2, then we will only return the
new sequence if -m is >= 4. 

Input Parameters:

Requires

-r : fastq input file for single end reads

OR 

-1 : fastq input file for the first set of read pairs

AND

-2 : fastq input file for the second set of read pairs


Output Parameters:

-o : SAM output filename

Defaults to standard out.

-w : wiggle ouput filename

A wiggle file is only generated if this is set.

-n : A snp coverage input file

SNP's are only considered if this is provided.


Optional Arguments:

-a : The type of the underlying assay.

The two calid options are 'i' ( for chip_seq ) and 'a' ( for cage ). If this argument
is set, then the data will be mapped iteratively. If not, then only the marginal mappings
will be produced.


Arguments that you probably dont want to touch unless you know what you are doing:

-s : Indexed sequence length
-l : ( DEBUG )debugging  log file
-c : ( DEBUG) candidate mapping db directory
