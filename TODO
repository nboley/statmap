46) Refactor the error block estimation code in find_all_candidate_mappings
    into a function - update_mapping_params, or similar.
    a) really, want to reconsider how we build mapping params for reads - now
       that we are sampling the error data, it can no longer be cleanly built
       for each read
45) Cleanup rawread_db_is_empty logic so it correctly deals with the case where
    the number of reads in the DB is a multiple of the update size, i.e. the
    case where we need to read one more byte to set the EOF flag.

Nathan:
  implement provided error model
   - use the provided error estimates as the predictor
  use a dynamic step size
     in find cand mappings, we now use global param to update read error models         

-44) Clean up candidate_mapping struct.
     a) maybe get rid of RECHECK. Since reads are often longer than the index
        probes, it's probably a good idea to always recheck them. Instead of
        setting RECHECK = INVALID, free the candidate mapping and set = NULL.
-43) generalize paired end joining code in mapped_reads.c
     a) new candidate_mappings container that can be sorted by the pos_in_template
        of each candidate_mapping's originating read_subtemplate.
     b) rather than using the read type, use pos_in_template. For now, brute
        force - every cm should be paired with a cm of a subsequent
        pos_in_template. So we want to pair 1 to 2, 3, ... , -3, -2, -1.
     c) Get this running with assertions so we're only handling the established
        single end (1) and paired end cases (1, -1).
-42) Expand diploid mapped_locations in the filtering step.
     a) why are the current diploid tests passing if this isn't working?
-41) Don't bulk add all locations from a pseudo_location into the
     mapped_locations used in the matching code (memory concerns).
     Search through the ps_locs instead (they are sorted).

-40) error estimates code
-39) fragment length estimation code
     Estiamte fragment length dist for single end reads
-38) write network breaking code
     Probably the most important TODO. 
-37) Reconsider mapped_reads
-36) Move psloc handling to candidate mapping building.
     a) add compiler flag (config.h) to use/not use pslocs
   X b) Search pslocs if we encounter them in a mapped_location while finding
        matching mapped_location's.
   X c) Remove pslocs handling code from joining candidate mappings. Will
        greatly simplify the joining code, especially in the paired end case.
X -35) (idea) Store subseq_len and subseq_offset in the indexable_subtemplates,
     and store pointers to the originating indexable_subtemplate on the
     mapped_location's.
-34) (idea) Incorporate the min_match_penalty and max_penalty_spread parameters
     into the error model, instead of passing them as parameters all over the
     place in find_candidate_mappings. *Wait for error_model merge*
-33) Eliminated the thrad path in the update trace code - it appears
     to be slow. There is probably some optimization to be done, but 
     for now we just set the threads to always be one.
-32) Made some things signed for overflow debugging purposes.
     search MADE_SIGNED_REVERT to find them
-31) Adding rawreads to the DB also opens the unmappable files. This is probably
     incorrect, and the sam code was overwriting these files. I fixed it quickly
     by chaning the open mode to append, but the correct fix is to initialize a
     new raw read db from a fastq file, and then have an open function. Too much
     work for very little gain? Perhaps, but it would help when I want to have 
     multiple read input files in the same directory. 
-30) there is a newly introduced correctness bug in the pseudo_locations code
     for index probes that are less than the index length. The problem is that
     the pseudo locations are generted off of the index probe length, in which
     the penalties have to be identical. But, if the probe is shorter, then
     the penalties may be different. One solution is to build a seperate set
     of pseudo locations for each experiment ( base on the read length ) but this
     is problematic for experiments with mixed read lengths - something I was 
     reall hoping to avoid. The other easy-ish solution is to simply break the 
     pseudo locations out in the candidate mapping step, but this will result in 
     the same inefficiencies that I had before. Probably the best solution is to 
     find the maximum sequence length, and then build the pseudo locations from
     that ( which will lead to inefficiencies again if that is much longer than
     a bunch of short reads. Like, for instance, if we tried to mix a 454 and
     illumina experiment ) but it's best. However, that's a big pain and I have more
     pressing issues and the correction is *small* if the probe length is pretty 
     close to the read length so, for now, I'm going to accept the error misestimation.
     ( ALSO, it would be nice to have a unit test which catches this )
-29) FIX SEGFAULT WHEN NO FRAG LEN DISTRIBUTION PASSED
-28) Do I need strand specific densities for paired end chip seq?
-27) Fix bug in iterative mapping bector operations that uses incorrectly shifted chipseq trace
-26.9) Fix failure to free calculated chipseq densities in chipseq_bs_density
-26) Fix the hack in map_marginal that uses the is_nc flag. ( What's better? )
-25) COPY estimated_fl_dist into the output directory
-24) simple repeat analysis, with an eye towards item -23
-23) Paralellize trace normalization
H -23) PSEDUO locations - speed up repeats
  ( Review this code - needs to be faster and more efficient in iterative. Currently,
    we just expand this into mapped reads ( but we pbly shouldnt )
-22.5) make the mapped_locaiton type smaller - maybe half floats?
X -22) Fix the bootstrap aggregation code
-21) Make random number generation actually uniform by stopping  rand()%MODULO usage
-20.1) FIX the chr name hack in the wiggle aggregation code. Currently, we 
       hard coded the max number of chr names to be 100. That is realy really DIRTY
X -20.01) use vector operations for trace aggregation
-20.001) FIX not accounting for the tag length in fl dist density ( build_chipseq_bs_density ) 
         ALSO, at the same time, look for a better place to put that density
X -20) Make DEFAULT output use timestamp
X -19) add in MAKE CHECK
M -18) Make copy traces actually copy traces
M renamed the function to not be wrong - currently we never need to make a copy
X -17) Add max number of iterations options
M -16) Use sensible limits for convergence
M ( MOVED TO USING MAX CHANGE )
X -15) Write code to parse and store prior fragment length distribution
X -15b) Write code to infer fragment lengths forom uniquely mapped paired end reads
X -15c) Actually start using the inferred fragment length distribution
X-15d) Fix and write tests for single end chipseq reads
X -14) write method to reset read conditional prbs
X -13) use locking, threads for iterative mapping
X -12) write lhd code
X -11) get rif of include rawread.h in candidate_mapping.h, use FWD declaration, 
X -10) remove include candidate_mapping.h from mapped_read
X -13) Split out trace writing code
X -13) FIX BUG that overcounts ( i think ) the number of reads during the mmaped indexing
X -12) raise error for too short reads
X -11.5) print out nonmapping reads to fastq.nonmapping
X -11.1) fix snp bug - we need to start adding mutliple reads to the index when a snp is in range
X -11.1) fix snp bug - doesnt adjust errors for ref sequences that cover snps
X -11) Fix snp unit tests to be more comprehensive
X -10.9) Fix snp mapping code to update snp cnts
X -10) Fix the marginal vs cond prb calculations in print to sam
-5) Fix the 'merge' join for the candidate map joining
    Currently, this is correct but it is just using the naive N^2 algorithm.
    At the very least, it needs to be N^2 in chromosome and matched read pairs
M -3) Make sure that snps work when there are more than 4 ( hint, I've gotten assertion errors )
M     ( The SNP code has been removed in favor of the much better diploid mapping code )
-2) In get_next_read_from_mapped_reads_db, we have an unnecessary memcopy to 
    clean up the memory usage. Get rid of this. 
X -3) Finish location node type
X -2) Fix segfault on file bad input names
X -2) Add options for different sequencing error types ( in fastq )
M -1) Fix occasional mapping correctness w/ paied end reads
M ( I cant recreate this after fixing the valgrind memory error, so I 
M   am assuming that this was it, but I'm not certain )
M
X 0.1) use memset in the trace zeroing ( update trace from reads )
X 0.8) rename mapped_short_read to packed_mapped_read
X 0.9) Seperate joining and sam printing
M 0.95) Fix sam printing for threaded apps and paired end reads
M ( I dont know what I was talking about when I added this TODO - but it seems to work )
X 0.96) Fix sample wiggle printing code so that it works for other trace types
X 1) Allow users to specify an output directory ( generic chdir )
X 1.01) Finish the recheck code
M 1.1) Make srue the read len calc is good for paired end reads
M      That is, we should grab a couple of sequences from both files
M THis is no longer necessary because of the recheck code
2) Cleanup the rawreaddb interface
   i) create a cursor interface
   X ii) integrate locking and readkey with the cursor/db interface
   X iii) remove the get_read_from_db function in statmap.c
X 2.1) Make mapped short read location type take a bitfield
X      to conserve on disk storage space
X 2.1) fix mapped_location vs mapped_read_location name confusion
X 2.2) cleanup error codes to make them standard
M 2.3) Remove the signed bits in the sequences node UNION ( currently here for debugging )
M      We can actually remove these when we need the extra space
3) Add checks for paired end reads to ensure the read names are identical 
   ( except slashes )
X 3.1) Finish on disk indexes
X 3.11) remove useless code ( esp marshalling code, and ifdef's out code )
X 3) Fix unit tests to correctly identify reads that didnt map due to mutation rates
3.1 ) The get next candidate mapping will stop returning read ids if it gets to 
    the end of the db ( iow, the file is empty ) even if there are still read ids
    remaining. We fix this in the sam printing code by looking at rawreads instead.
    But we should probably reorganize this a bit so that candidate mappings keep
    track of every read.
3.2) Unify the get next read infrastructure to use the mmapped data when appropriate.
     remove the hacks in iterative mapping that do this manually.
4) Add standard error interface code
5) Fix miscount of mapped reads for paired end reads
X 6) Change chipseq sim to iterate a fixed number of bps, rather than a fixed rate
X 7) Seperate seq length from *indexed* sequence length in option parsing. ( currently, 
X   I say that if the required number of HQ basepairs is too high, that it should be the 
X   indexed sequence length. This isnt *exactly* correct, because we could want this feature
X   for reads that have varying sizes. )
9) Check the atoi, atof formatting in parse args. 
M 10) Change the node type to an enum
M     Actually, who cares about this
X 11) allow mapping of N's
M 12) Allow mapping of really short reads
M Fine for now, we only need to fix this if we need it for the RNAseq mapping code.
X 13) Create candidate_mappings.h ( and, maybe, mapped_locations.h )
X    Currently, mapped_locations, candidate_mappings, and mapped_reads are all in mapped_location.h/c
X    This is a bit confusing, and a pretty large file. I should probably split them out into 
X    seperate files. 
13b) Do the smae as 13 excpet with db_interface.c, which is way confusing. 
O 15)  Add code to iteratively map directly from a sam file
O 15b) Write code to produce a mappings_db from a sam file
X 16) Allow reference genomes from multiple files
X 17) Write config file parser, and use it
18) Add optimization to filter impossible paired end reads 
    ( by FL ) when we dont have to estimate the dist

# Longstanding

0) Determine what types of mappings are possible for specific assay types.
   This would affect, for example, our consideration of what a valid mapping is
   (considering strand and position for paired end, for example ).

